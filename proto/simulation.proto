syntax = "proto3";

package simulation;

// The SimulationService with a batch processing method.
service SimulationService {
  // RunBatch distributes a batch of simulation tasks, returning aggregated performance metrics.
  rpc RunBatch (SimulationBatchRequest) returns (SimulationBatchResult);
}

// We only send the parameters needed to rebuild a Sampler
message SamplerConfig {
  oneof kind {
    FactorModelConfig factor_model = 1;
    NormalConfig      normal       = 2;
    SeriesGanConfig   series_gan   = 3;
  }
}

// All the data needed to reconstruct the minimal FactorModel sampler
message FactorModelConfig {
  repeated double mu_assets              = 1;
  repeated double covariance_assets      = 2;  // flattened
  uint64         seed                    = 3;
}

// Data for the “normal” sampler
message NormalConfig {
  repeated double means = 1;
  repeated double cov    = 2;  // flattened covariance matrix
  uint64         seed   = 3;
}

// Data for the GAN sampler
message SeriesGanConfig {
  uint32 periods = 1;
  uint64 seed    = 2;
}

// Now embed that in your batch request
message SimulationBatchRequest {
  SamplerConfig sampler         = 1;
  bytes          portfolios_blob= 2;
  EvolutionConfig config        = 3;
  int32          iterations     = 4;
}

// Simulation configuration carrying only the parameters needed by the simulation server.
message EvolutionConfig {
  // The time horizon of the simulation in days.
  int32 time_horizon_in_days = 1;
  // period to sample
  uint32 periods_to_sample = 2;
  // The amount of money that is available to invest.
  double money_to_invest = 3;
  // The risk free rate used for computing performance metrics.
  double risk_free_rate = 4;
}

// The batch result aggregates metrics over all iterations for each portfolio.
message SimulationBatchResult {
  // Aggregated sum of returns for each portfolio.
  repeated double sum_returns = 1;
  // Aggregated sum of volatilities for each portfolio.
  repeated double sum_volatilities = 2;
  // Aggregated sum of Sharpe ratios for each portfolio.
  repeated double sum_sharpes = 3;
  // The market scenario (i.e. series of returns) from the last simulation.
  SimulationScenario last_scenario = 4;
}

// A market scenario, represented as a time series of returns.
message SimulationScenario {
  repeated double returns = 1;
}
