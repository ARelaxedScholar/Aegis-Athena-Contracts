syntax = "proto3";

package simulation;

// The SimulationService with a batch processing method.
service SimulationService {
  // RunBatch distributes a batch of simulation tasks, returning aggregated performance metrics.
  rpc RunBatch (SimulationBatchRequest) returns (SimulationBatchResult);
}

// The batch request for simulation.
message SimulationBatchRequest {
  // The serialized blob for portfolios (e.g. using bincode serialization on a vector of Portfolio).
  bytes portfolios_blob = 1;
  // Configuration parameters for the batch simulation.
  EvolutionConfig config = 2;
  // Number of simulation iterations (i.e. batch size).
  int32 iterations = 3;
  // The seed for ensuring reproducibility.
  uint64 seed = 4;
}

// Simulation configuration carrying only the parameters needed by the simulation server.
message EvolutionConfig {
  // The time horizon of the simulation in days.
  int32 time_horizon_in_days = 1;
  // The amount of money that is available to invest.
  double money_to_invest = 2;
  // The risk free rate used for computing performance metrics.
  double risk_free_rate = 3;
}

// The batch result aggregates metrics over all iterations for each portfolio.
message SimulationBatchResult {
  // Aggregated sum of returns for each portfolio.
  repeated double sum_returns = 1;
  // Aggregated sum of volatilities for each portfolio.
  repeated double sum_volatilities = 2;
  // Aggregated sum of Sharpe ratios for each portfolio.
  repeated double sum_sharpes = 3;
  // The market scenario (i.e. series of returns) from the last simulation.
  SimulationScenario last_scenario = 4;
}

// A market scenario, represented as a time series of returns.
message SimulationScenario {
  repeated double returns = 1;
}
